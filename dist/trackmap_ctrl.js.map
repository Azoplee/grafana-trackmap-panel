{"version":3,"sources":["../src/trackmap_ctrl.js"],"names":["L","moment","appEvents","MetricsPanelCtrl","panelDefaults","maxDataPoints","autoZoom","lineColor","pointColor","TrackMapCtrl","$scope","$injector","_","defaults","panel","timeSrv","get","coords","leafMap","polyline","hoverMarker","hoverTarget","events","on","onInitEditMode","bind","onPanelTeardown","onDataReceived","onPanelHover","onPanelClear","addEditorTab","$timeout","cancel","nextTickPromise","evt","length","target","Math","floor","pos","x","bringToFront","setStyle","fillColor","color","min","max","idx","exact","timestamp","setLatLng","position","removeFrom","map","id","scrollWheelZoom","zoomSnap","zoomDelta","control","layers","tileLayer","attribution","maxZoom","addTo","forcedOverlay","subdomains","circleMarker","latLng","fillOpacity","weight","radius","mapBaseLayerChange","mapZoomToBox","e","overlay","layer","options","setZIndex","zIndex","bounds","reduce","t","c","boxZoomBounds","contains","from","to","Infinity","isFinite","setTime","utc","zoomToFit","fitBounds","getBounds","data","setupMap","setView","lats","datapoints","lons","i","push","addDataToMap","templateUrl"],"mappings":"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","file":"trackmap_ctrl.js","sourcesContent":["import L from './leaflet/leaflet.js';\nimport moment from 'moment';\n\nimport appEvents from 'app/core/app_events';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport './leaflet/leaflet.css!';\nimport './module.css!';\n\nconst panelDefaults = {\n  maxDataPoints: 500,\n  autoZoom: true,\n  lineColor: 'red',\n  pointColor: 'royalblue',\n}\n\nexport class TrackMapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.timeSrv = $injector.get('timeSrv');\n    this.coords = [];\n    this.leafMap = null;\n    this.polyline = null;\n    this.hoverMarker = null;\n    this.hoverTarget = null;\n\n    // Panel events\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n\n    // Global events\n    appEvents.on('graph-hover', this.onPanelHover.bind(this));\n    appEvents.on('graph-hover-clear', this.onPanelClear.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-trackmap-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  onPanelHover(evt) {\n    if (this.coords.length === 0) {\n      return;\n    }\n\n    // check if we are already showing the correct hoverMarker\n    let target = Math.floor(evt.pos.x);\n    if (this.hoverTarget && this.hoverTarget === target) {\n      return;\n    }\n\n    // check for initial show of the marker\n    if (this.hoverTarget == null){\n      this.hoverMarker.bringToFront()\n                      .setStyle({\n                        fillColor: this.panel.pointColor,\n                        color: 'white'\n                      });\n    }\n\n    this.hoverTarget = target;\n\n    // Find the currently selected time and move the hoverMarker to it\n    // Note that an exact match isn't always going to work due to rounding so\n    // we clean that up later (still more efficient)\n    let min = 0;\n    let max = this.coords.length - 1;\n    let idx = null;\n    let exact = false;\n    while (min <= max) {\n      idx = Math.floor((max + min) / 2);\n      if (this.coords[idx].timestamp === this.hoverTarget) {\n        exact = true;\n        break;\n      }\n      else if (this.coords[idx].timestamp < this.hoverTarget) {\n        min = idx + 1;\n      }\n      else {\n        max = idx - 1;\n      }\n    }\n\n    // Correct the case where we are +1 index off\n    if (!exact && idx > 0 && this.coords[idx].timestamp > this.hoverTarget) {\n      idx--;\n    }\n    this.hoverMarker.setLatLng(this.coords[idx].position);\n  }\n\n  onPanelClear(evt) {\n    // clear the highlighted circle\n    this.hoverTarget = null;\n    if (this.hoverMarker) {\n      this.hoverMarker.setStyle({\n        fillColor: 'none',\n        color: 'none'\n      });\n    }\n  }\n\n  setupMap() {\n    // Create the map or get it back in a clean state if it already exists\n    if (this.leafMap) {\n      if (this.polyline) {\n        this.polyline.removeFrom(this.leafMap);\n      }\n      this.onPanelClear();\n      return;\n    }\n\n    // Create the map\n    this.leafMap = L.map('trackmap-' + this.panel.id, {\n      scrollWheelZoom: false,\n      zoomSnap: 0.5,\n      zoomDelta: 1,\n    });\n\n    // Define layers and add them to the control widget\n    L.control.layers({\n      'OpenStreetMap': L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        maxZoom: 19\n      }).addTo(this.leafMap), // Add default layer to map\n      'OpenTopoMap': L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n        maxZoom: 17\n      }),\n      'Satellite': L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Imagery &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n        // This map doesn't have labels so we force a label-only layer on top of it\n        forcedOverlay: L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-labels/{z}/{x}/{y}.png', {\n          attribution: 'Labels by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n          subdomains: 'abcd',\n          maxZoom: 20,\n        })\n      })\n    }).addTo(this.leafMap);\n\n    // Dummy hovermarker\n    this.hoverMarker = L.circleMarker(L.latLng(0, 0), {\n      color: 'none',\n      fillColor: 'none',\n      fillOpacity: 1,\n      weight: 2,\n      radius: 7\n    }).addTo(this.leafMap);\n\n    // Events\n    this.leafMap.on('baselayerchange', this.mapBaseLayerChange.bind(this));\n    this.leafMap.on('boxzoomend', this.mapZoomToBox.bind(this));\n  }\n\n  mapBaseLayerChange(e) {\n    // If a tileLayer has a 'forcedOverlay' attribute, always enable/disable it\n    // along with the layer\n    if (this.leafMap.forcedOverlay) {\n      this.leafMap.forcedOverlay.removeFrom(this.leafMap);\n      this.leafMap.forcedOverlay = null;\n    }\n    let overlay = e.layer.options.forcedOverlay;\n    if (overlay) {\n      overlay.addTo(this.leafMap);\n      overlay.setZIndex(e.layer.options.zIndex + 1);\n      this.leafMap.forcedOverlay = overlay;\n    }\n  }\n\n  mapZoomToBox(e) {\n    // Find time bounds of selected coordinates\n    const bounds = this.coords.reduce(\n      function(t, c) {\n        if (e.boxZoomBounds.contains(c.position)) {\n          t.from = Math.min(t.from, c.timestamp);\n          t.to = Math.max(t.to, c.timestamp);\n        }\n        return t;\n      },\n      {from: Infinity, to: -Infinity}\n    );\n\n    // Set the global time range\n    if (isFinite(bounds.from) && isFinite(bounds.to)) {\n      // KLUDGE: Create moment objects here to avoid a TypeError that\n      // occurs when Grafana processes normal numbers\n      this.timeSrv.setTime({\n        from: moment.utc(bounds.from),\n        to: moment.utc(bounds.to)\n      });\n    }\n  }\n\n  // Add the circles and polyline to the map\n  addDataToMap() {\n    this.polyline = L.polyline(\n      this.coords.map(x => x.position, this), {\n        color: this.panel.lineColor,\n        weight: 3,\n      }\n    ).addTo(this.leafMap);\n\n    this.zoomToFit();\n  }\n\n  zoomToFit(){\n    if (this.panel.autoZoom){\n      this.leafMap.fitBounds(this.polyline.getBounds());\n    }\n  }\n\n  refreshColors() {\n    if (this.polyline) {\n      this.polyline.setStyle({\n        color: this.panel.lineColor\n      });\n    }\n  }\n\n  onDataReceived(data) {\n    this.setupMap();\n\n    if (data.length === 0 || data.length !== 2) {\n      // No data or incorrect data, show a world map and abort\n      this.leafMap.setView([0, 0], 1);\n      return;\n    }\n\n    // Asumption is that there are an equal number of properly matched timestamps\n    // TODO: proper joining by timestamp?\n    this.coords.length = 0;\n    const lats = data[0].datapoints;\n    const lons = data[1].datapoints;\n    for (let i = 0; i < lats.length; i++) {\n      if (lats[i][0] == null || lons[i][0] == null ||\n          lats[i][1] !== lats[i][1]) {\n        continue;\n      }\n\n      this.coords.push({\n        position: L.latLng(lats[i][0], lons[i][0]),\n        timestamp: lats[i][1]\n      });\n    }\n    this.addDataToMap();\n  }\n}\n\nTrackMapCtrl.templateUrl = 'module.html';\n"]}